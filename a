1、从进制角度思考将长数字串转化成数组形式
#include<bits/stdc++.h>
#include <algorithm>
#include<fstream>
//printf("%.7f",M_PI*r*r);保留7位小数&π的表示法
//printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数
using namespace std;

int main(){
    //freopen("input.txt","r",stdin);  // 重定向从data.in文件中读取数据
    //freopen("output.txt","w",stdout); //  重定向从data.out文件向写入数据，用法见   数据统计（重定向版）.cpp
    int n,head=0,flag,co=0;
    cin>>n;
    int a[100000];//数组整体初始化要用大括号
    a[0]=1;
    for(int i=1;i<=n;i++){
        for(int j=0;j<=head;j++){
            a[j]=i*a[j]+co;
            co=a[j]/10;
            //cout<<a[j]<<"a"<<co<<"co"<<endl;
            a[j]=a[j]%10;

        }
        while(co!=0){
            head++;
            a[head]=co%10;
            co=co/10;
        }
    }
    for(int i=head;i>=0;i--)
        cout<<a[i];

    return 0;
}

2、高精度加法：
#include<bits/stdc++.h>
#include <algorithm>
#include<fstream>
//printf("%.7f",M_PI*r*r);保留7位小数&π的表示法
//printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数
using namespace std;

int main(){
    freopen("input.txt","r",stdin);  // 重定向从data.in文件中读取数据
    freopen("output.txt","w",stdout); //  重定向从data.out文件向写入数据，用法见   数据统计（重定向版）.cpp
    string str1,str2;
    cin>>str1>>str2;
    int len1=str1.length();
    int len2=str2.length();
    int num=max(len1,len2);
    int a[num+5]={0},m=0;
    for(int i=len1-1;i>=0;i--){
        a[m]=str1[i]-'0';
        m++;
    }
    int co=0;
    m=0;
    for(int i=len2-1;i>=0;i--){
        a[m]=a[m]+(str2[i]-'0')+co;
        co=a[m]/10;
        //cout<<a[m]<<"a"<<co<<"co"<<m<<"m"<<endl;
        a[m]=a[m]%10;
        m++;
    }
    while(co!=0){
        a[m]=a[m]+co;//这个地方处理不能偷懒，因为a[m]不一定是0，可能加上a[m]本身还会有不一样的进位，跟阶乘不一样
        co=a[m]/10;
        a[m]=a[m]%10;
        m++;
    }
    //num=max(num,m);//进位最多是1，所以可以不要
    if(a[num]!=0)
        cout<<a[num];//最高位可能有进位也可能没有，如果没有的话0就别输出了
    for(int i=num-1;i>=0;i--)
        cout<<a[i];
    return 0;
}

3、2n皇后问题
#include<bits/stdc++.h>
#include <algorithm>
#include<fstream>
#include <iostream>
#include <iomanip>
#include <Queue>
#include <string>
//printf("%.7f",M_PI*r*r);保留7位小数&π的表示法
//printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数
//freopen("input.txt","r",stdin);  // 重定向从data.in文件中读取数据
//freopen("output.txt","w",stdout); //  重定向从data.out文件向写入数据，用法见   数据统计（重定向版）.cpp

#include <iostream>
#include<math.h>
using namespace std;
int n;
int map[9][9];
int bq[9], wq[9];
//定义bq，wq分别用于存储 在每一行都在哪一个位置摆放了黑（black queen），白皇后 (write queen)
//设bq[i]=j，则表示第i列的黑皇后放在第j行上
int sum = 0;

bool Ispos(int cur, int* q)//判断皇后是否满足条件
{
	for (int i = 1; i < cur; i++)
	{
		if (q[i] == q[cur] || (abs(i - cur) == abs(q[i] - q[cur])))//这个地方很巧妙
			return false;
			//若有一个满足上面的条件的，就会返回false
	}
	return true;
}
void WQ(int cur)
{
	if (cur == n + 1)//白皇后也全部放置，次数+1
	{
		sum++;
	}
	for (int i = 1; i <= n; i++)
	{
		if (bq[cur] == i)continue;//判断是否黑皇后已摆放的位置 
		if (map[cur][i] == 0)continue;
		wq[cur] = i;
		if (Ispos(cur, wq))
			WQ(cur + 1);
	}
}
void BQ(int cur)
{
	if (cur == n + 1) //若黑皇后放置完，再处理白皇后
	{
		WQ(1);
	}
	for (int i = 1; i <= n; i++)
	{
		if (map[cur][i] == 0)continue;//若map对应的位置为0,即不能放置皇后 ，跳过这次循环 
		bq[cur] = i;
		if (Ispos(cur, bq))
		{
			BQ(cur + 1);
		}
	}
}
int main()
{
	cin >> n;
	for (int i = 1; i <= n; i++)// i = 1为了与一般认识一样
	{
		for (int j = 1; j <= n; j++)// j = 1为了与一般认识一样
		{
			cin >> map[i][j];
		}
	}
	BQ(1);//执行摆放黑皇后函数（当然先摆放白皇后也行，不过要改一些），
	//里面是1，表示从第1列开始,放置
	cout << sum;
	return 0;
}

4、关于完美主义贪心形成回文数列
(1)先要手动模拟成功再写代码尝试
(2)i从左至右作为对比定点，到中间就行了（奇数偶数只会在某个字母没有找到对应的时候有区别），j从右往左直至到i+1，找到相同以后不能直接对换要一个个换过去
(3)找到单身字母以后，不用动他，sum要增加（增加他换到中间的成本），后面比对的时候不再是与i对称位置而是假设单身字母换到中间以后的对称位置
#include<bits/stdc++.h>
#include <algorithm>
#include<fstream>
#include <iostream>
#include <iomanip>
#include <Queue>
#include <string>
//printf("%.7f",M_PI*r*r);保留7位小数&π的表示法
//printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数
//freopen("input.txt","r",stdin);  // 重定向从data.in文件中读取数据
//freopen("output.txt","w",stdout); //  重定向从data.out文件向写入数据，用法见   数据统计（重定向版）.cpp
//freopen("input.txt","r",stdin);
//freopen("output.txt","w",stdout);

#include<bits/stdc++.h>

using namespace std;

int main(){
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
	int length,flag=0,num=0,sum=0;
	cin>>length;
	string str;
	cin>>str;
	for(int i=0;i<length/2;i++){
        for(int j=length-i-1+num;j>=i+1;j--){
            flag=0;
            if(str[i]==str[j]){
                for(int p=j;p<length-i-1+num;p++){
                    str[p]=str[p+1];
                    sum++;
                }
                str[length-i-1+num]=str[i];
                flag=1;
                break;
            }
        }
        if(flag==0){
                num++;
                if(length%2==0){
                    cout<<"Impossible";
                    return 0;
                }
                else{
                    if(num>1){
                        cout<<"Impossible";
                        return 0;
                    }
                    sum=sum+length/2-i;
                }
            }
	}
	cout<<sum;
	return 0;
}
5、DP印章问题
#include<bits/stdc++.h>
#include <algorithm>
#include<fstream>
#include <iostream>
#include <iomanip>
#include <Queue>
#include <string>
//printf("%.7f",M_PI*r*r);保留7位小数&π的表示法
//printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数
//freopen("input.txt","r",stdin);  // 重定向从data.in文件中读取数据
//freopen("output.txt","w",stdout); //  重定向从data.out文件向写入数据，用法见   数据统计（重定向版）.cpp
//freopen("input.txt","r",stdin);
//freopen("output.txt","w",stdout);

using namespace std;
double dp[25][25], p;//这玩意一定得出去，为了用pow
int main(){
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
	int n,m;
	cin>>n>>m;
	p=1.0/n;
	for ( int i = 1; i <= m; ++i ) {
		for ( int j = 1; j <= n; ++j ) {
			if ( i <  j ) dp[i][j] = 0;
			if ( j == 1 ) {
				dp[i][j] = pow (p, i-1);  //p^(i-1)
			}
			else {
				dp[i][j] = dp[i-1][j] * (j*1.0/n) + dp[i-1][j-1] * ((n-j+1)*1.0/n);
			}
		}
	}
	printf("%.4lf",dp[m][n]);
	return 0;
}
