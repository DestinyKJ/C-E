1、从进制角度思考将长数字串转化成数组形式
#include<bits/stdc++.h>
#include <algorithm>
#include<fstream>
//printf("%.7f",M_PI*r*r);保留7位小数&π的表示法
//printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数
using namespace std;

int main(){
    //freopen("input.txt","r",stdin);  // 重定向从data.in文件中读取数据
    //freopen("output.txt","w",stdout); //  重定向从data.out文件向写入数据，用法见   数据统计（重定向版）.cpp
    int n,head=0,flag,co=0;
    cin>>n;
    int a[100000];//数组整体初始化要用大括号
    a[0]=1;
    for(int i=1;i<=n;i++){
        for(int j=0;j<=head;j++){
            a[j]=i*a[j]+co;
            co=a[j]/10;
            //cout<<a[j]<<"a"<<co<<"co"<<endl;
            a[j]=a[j]%10;

        }
        while(co!=0){
            head++;
            a[head]=co%10;
            co=co/10;
        }
    }
    for(int i=head;i>=0;i--)
        cout<<a[i];

    return 0;
}

2、高精度加法：
#include<bits/stdc++.h>
#include <algorithm>
#include<fstream>
//printf("%.7f",M_PI*r*r);保留7位小数&π的表示法
//printf输出结果，则你的格式字符串应该写成%I64d以输出long long类型的整数
using namespace std;

int main(){
    freopen("input.txt","r",stdin);  // 重定向从data.in文件中读取数据
    freopen("output.txt","w",stdout); //  重定向从data.out文件向写入数据，用法见   数据统计（重定向版）.cpp
    string str1,str2;
    cin>>str1>>str2;
    int len1=str1.length();
    int len2=str2.length();
    int num=max(len1,len2);
    int a[num+5]={0},m=0;
    for(int i=len1-1;i>=0;i--){
        a[m]=str1[i]-'0';
        m++;
    }
    int co=0;
    m=0;
    for(int i=len2-1;i>=0;i--){
        a[m]=a[m]+(str2[i]-'0')+co;
        co=a[m]/10;
        //cout<<a[m]<<"a"<<co<<"co"<<m<<"m"<<endl;
        a[m]=a[m]%10;
        m++;
    }
    while(co!=0){
        a[m]=a[m]+co;//这个地方处理不能偷懒，因为a[m]不一定是0，可能加上a[m]本身还会有不一样的进位，跟阶乘不一样
        co=a[m]/10;
        a[m]=a[m]%10;
        m++;
    }
    //num=max(num,m);//进位最多是1，所以可以不要
    if(a[num]!=0)
        cout<<a[num];//最高位可能有进位也可能没有，如果没有的话0就别输出了
    for(int i=num-1;i>=0;i--)
        cout<<a[i];
    return 0;
}
